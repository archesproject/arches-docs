######################
Command Line Reference
######################

+ `Installation Commands`_
+ `ElasticSearch Management`_
+ `Import Commands`_
+ `Export Commands`_
+ `Managing Functions, DataTypes, and Widgets`_
+ `Other Useful Django Commands`_

This page serves as a quick reference guide for working with Arches through a command prompt. Along with default Django commands, a good deal of Arches operations have been added to ``manage.py``. In a command prompt, [activate your virtual environment](Dev-Installation#4-activate-the-virtual-environment), then run the following commands from your root app directory (the one that contains ``manage.py``).

_All file or directory path parameters (``-s``, ``-c``, ``-d``) should be absolute paths._

Installation Commands
=====================

installing from a local repo clone
----------------------------------

.. code-block:: shell

    pip install -e .

-e      This argument with the value ``.`` indicates to pip that it should link the local directory with the virtual environment.

Installs Arches into your virtual environment from a local clone of the `archesproject/arches <https://github.com/archesproject/arches>`_ repo, or your own fork of that repo. To do this properly, create a new virtual environment and activate it, clone the repo you want, enter that repo's root directory, and then run the command. Also, this command must be followed by::

    pip install -r arches/install/requirements.txt

in order to properly install all of Arches' python requirements. Make sure to use ``\`` instead of ``/`` on Windows.

creating (or recreating) the database
-------------------------------------

.. code-block:: bash

    python manage.py packages -o setup_db

-o  ``packages`` operation, in this case ``setup_db``

Deletes and recreates the database, as defined by ``settings.DATABASES['default']``. Likewise, **this command will remove all existing data**.

loading a package into a project
--------------------------------

.. code-block:: bash

    python manage.py packages -o load_package -s source_of_package [-db true]

-db Add this argument with the value ``true`` to force the destruction and recreation of your database before loading the package.

The source (``-s``) of a package can be either a path to a local directory, the location of a local zipfile containing a package, or the url to a github repo archive that contains a package. For example, loading the v4 sample package from where it resides in github would just be::

    python manage.py packages -o load_package -s https://github.com/archesproject/arches4-example-pkg/archive/master.zip

ElasticSearch Management
========================

**install elasticsearch**

.. code-block:: bash

    python manage.py es install [-d path_to_destination_directory]

-d  (optional) Path to directory in which ElasticSearch should be installed. Default is the root of your project.

Installs ElasticSearch into the indicated location. If no destination is provided, ElasticSearch is placed in the app root directory. Read [[Installing and Running Elasticsearch]] for more.

**run elasticsearch**

.. code-block:: bash



Import Commands
===============

*Please refer to https://github.com/archesproject/arches/wiki/Command-Line-Reference#import-commands for now*.

Export Commands
===============

export branch or resource model schema
--------------------------------------

.. code-block:: bash

    python manage.py packages -o export_graphs -d 'path_to_destination_directory' -g uuid/branches/resource_models/all

-o          ``packages`` operation, in this case ``export_graphs``
-d          Absolute path to destination directory
-g          UUID of specific graph, or ``branches`` for all branches, ``resource_models`` for all resource models, or ``all`` for everything.

Exports Resource Models and/or Branches. Note that sometimes (as in this case) Resource Models and Branches are generically called "graphs".

export business data to csv or json
-----------------------------------

.. code-block:: bash

    python manage.py packages -o export_business_data -d 'path_to_destination_directory' -f 'csv' or 'json' [-c 'path_to_mapping_file' -g 'resource_model_uuid' -single_file]

-o                  `packages` operation, in this case ``export_business_data``
-d                  Absolute path to destination directory
-f                  Export format, must be ``csv`` or ``json``
-c                  (required for csv) Absolute path to the mapping file you would like to use for your csv export.
-single_file        (optional for csv) Use this parameter if you'd like to export your grouped data to the same csv file as the rest of your data.
-g                  (required for json, optional for csv) The resource model UUID whose instances you would like to export.

Exports business data to csv or json depending on the -f parameter specified. For csv export a mapping file is required. The exporter will export all resources of the type indicated in the resource_model_id property of the mapping file and the -g parameter will be ignored. For json export no mapping file is required, instead a resource model uuid should be passed into the -g command.

Note that in a Windows command prompt, you may need to replace ``'`` with ``"``.

export business data to shapefile
---------------------------------

.. code-block:: bash

    python manage.py export shp -t 'name_of_db_view' -d 'output_directory'

-t  A resource instance database view
-d  The destination directory for point, line, and polygon shapefiles, created when the command is run.

Other Data Management Commands
==============================

.. code-block:: bash

    python manage.py packages -o remove_resources [-y]

-y  Forces this command to run without interactive confirmation.

Removes all resources from your database, but leaves the all resources models, branches, thesauri, and collections intact.

.. code-block:: bash

    python manage.py packages -o create_mapping_file -d 'path_to_destination_directory' -g 'comma separated graph uuids'

-d  Path to directory to place the output in.
-g  One or more graph UUIDs to create a mapping for.

This mimics the 'Create Mapping File' command from the Arches Designer UI.

.. code-block:: bash

    python manage.py packages -o import_mapping_file -s 'path_to_mapping_file'


    imports a mapping file for a particular resource model. This will be used as the export mapping file for a resource by default (e.g. for search export).

business data export examples
-----------------------------

.. code-block:: bash

    python manage.py packages -o export_business_data -f 'csv' -c 'path_to_mapping_file'

Exports all business data of the resource model indicated in the mapping file. Two files are created. The first file contains one row per resource (if you resources all have the same geometry type this file can be used to create a shape file in QGIS or other program). The second file contains the grouped attributes of your resources (for instance, alternate names, additional classifications, etc.).

.. code-block:: bash

    python manage.py packages -o export_business_data -f 'json' -g 'resource_model_id'

-f  Format must be `json` or `

Exports all business data of the passed in resource_model_id to json.

Ontology Commands
=================

load an ontology or ontology extension
--------------------------------------

.. code-block:: bash

    python manage.py load_ontology [-s <path to ontology>] [-x <path to extension>] [-r/--reload] [-vn <version number>]

-s              Path to new ontology xml file to load
-x              Path to ontology extension xml file to load. You'll be prompted to choose which existing ontology you would like to extend.
-vn             If loading a new ontology or adding an extension, you must supply a version number.
-r              Reload ontology. You'll be prompted to choose which ontology to reload.

Managing Functions, DataTypes, and Widgets
==========================================

functions
---------

**list registered functions**

.. code-block:: bash

    python manage.py fn list

Lists all currently registered functions.

**registering functions**

.. code-block:: bash

    python manage.py fn register --source path/to/your/function.py

Register a newly created function. These ``.py`` files should sit in your projects ``functions`` directory.

**unregistering functions**

.. code-block:: bash

    python manage.py fn unregister -n 'Sample Function'

Unregister a function. Use the function name that is returned by ``fn list``.

datatypes
---------

**list registered datatypes**

.. code-block:: bash

    python manage.py datatype list

Lists all currently registered datatypes.

**registering and updating datatypes**

.. code-block:: bash

    python manage.py datatype register --source /Users/me/Documents/projects/mynewproject/mynewproject/datatypes/wkt_point.py

Registers a new datatype, in this example as defined in ``wkt_point.py``.

.. code-block:: bash

    python manage.py datatype update --source /Users/me/Documents/projects/mynewproject/mynewproject/datatypes/wkt_point.py

Updates a datatype, necessary anytime changes are made to your datatype's properties.

-source Location of the ``.py`` file that defines the datatype.

**unregister a datatype**

.. code-block:: bash

    python manage.py datatype unregister -d 'wkt-point'

Unregisters a datatype, in this example a datatype named ``wkt-point``.

-d  Name of datatype to unregister. Use the datatype name that is returned by ``datatype list``.

widgets
-------

All widget-related commands are identical to those for datatypes, just substitute ``widget`` for ``datatype``. Also note that where datatypes are defined in ``.py`` files, widgets are defined in ``.json`` files.
.. _creating_new_map_layers_reference:

Creating Map Layers
=======================


See :ref:`Creating New Map Layers` for file format requirements and other in-depth information.

MapBox
------
.. code-block:: bash

   python manage.py packages -o add_mapbox_layer -j /path/to/mapbox_style.json -n "New MapBox Layer"


Tileserver
----------

.. code-block:: bash

   python manage.py packages -o add_tileserver_layer -t /path/to/tileserver_config.json -n "New Tileserver Layer"


Tileserver Mapnik
-----------------


.. code-block:: bash

   python manage.py packages -o add_tileserver_layer -m /path/to/mapnik_config.xml -n "New Mapnik Tileserver Layer"

Other Useful Django Commands
============================

run the django webserver
------------------------

.. code-block:: bash

    python manage.py runserver

Run the Django dev server. Add ``0.0.0.0:8000`` to explicitly set the host and port, which may be necessary when using remote servers, like an AWS EC2 instance. More about `runserver <https://docs.djangoproject.com/en/1.11/ref/django-admin/#runserver>`_.

collect static files
--------------------

.. code-block:: bash

    python manage.py collectstatic

Collects all static files and places them in a single directory. Generally only necessary in production. Also allows all static files to be `hosted on another server <https://docs.djangoproject.com/en/1.11/howto/static-files/deployment/#serving-static-files-from-a-cloud-service-or-cdn>`_).

Django's full ``manage.py`` commands are documented `here <https://docs.djangoproject.com/en/1.11/ref/django-admin/#available-commands>`_.
